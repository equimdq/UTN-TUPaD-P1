Alumno: Ezequiel Alejandro Ventura
Comisi√≥n: 5

# UTN-TUPaD-P1

Este repositorio contiene una serie de ejercicios de programaci√≥n en Python, enfocados en la gesti√≥n de datos complejos y estructuras como diccionarios, listas, tuplas y sets.  

### Contenido:
- **Ejercicios sobre diccionarios**: Manipulaci√≥n de datos clave-valor, actualizaci√≥n y b√∫squeda eficiente.
- **Manejo de conjuntos**: Operaciones de uni√≥n, intersecci√≥n y diferencia para listas de aprobados en ex√°menes.
- **Automatizaci√≥n y l√≥gica de programaci√≥n**: Scripts interactivos con men√∫s para gestionar stock de productos y agendas de eventos.
- **An√°lisis de datos en textos**: Extracci√≥n de palabras √∫nicas y conteo de frecuencia en frases ingresadas por el usuario.

### Objetivo:
El proyecto busca mejorar la comprensi√≥n y aplicaci√≥n de estructuras de datos en Python, permitiendo desarrollar l√≥gica de programaci√≥n eficiente y adaptada a diferentes escenarios pr√°cticos.  

¬°Explora los ejercicios y prueba las distintas funciones interactivas! üöÄ  


Pr√°ctico 7: Estructuras de datos complejas
Objetivo:
Dominar el uso de estructuras de datos complejas en Python para
almacenar, organizar y manipular datos de manera eficiente, aplicando
buenas pr√°cticas y optimizando el rendimiento de las aplicaciones.
Resultados de aprendizaje:
1. Comprensi√≥n y aplicaci√≥n de iterables: listas, tuplas y sets.
2. Introducci√≥n a estructuras de datos complejas: diccionarios.
Actividades
1) Dado el diccionario precios_frutas
precios_frutas = {'Banana': 1200, 'Anan√°': 2500, 'Mel√≥n': 3000, 'Uva':
1450}
A√±adir las siguientes frutas con sus respectivos precios:
‚óè Naranja = 1200
‚óè Manzana = 1500
‚óè Pera = 2300

2) Siguiendo con el diccionario precios_frutas que resulta luego de ejecutar el c√≥digo
desarrollado en el punto anterior, actualizar los precios de las siguientes frutas:
‚óè Banana = 1330
‚óè Manzana = 1700
‚óè Mel√≥n = 2800

3) Siguiendo con el diccionario precios_frutas que resulta luego de ejecutar el c√≥digo
desarrollado en el punto anterior, crear una lista que contenga √∫nicamente las frutas sin los
precios.

4) Escrib√≠ un programa que permita almacenar y consultar n√∫meros telef√≥nicos.
‚Ä¢ Permit√≠ al usuario cargar 5 contactos con su nombre como clave y n√∫mero como valor.
‚Ä¢ Luego, ped√≠ un nombre y mostrale el n√∫mero asociado, si existe.

5) Solicita al usuario una frase e imprime:
‚Ä¢ Las palabras √∫nicas (usando un set).
‚Ä¢ Un diccionario con la cantidad de veces que aparece cada palabra.

6) Permit√≠ ingresar los nombres de 3 alumnos, y para cada uno una tupla de 3 notas.
Luego, mostr√° el promedio de cada alumno.

7) Dado dos sets de n√∫meros, representando dos listas de estudiantes que aprobaron Parcial 1
y Parcial 2:
‚Ä¢ Mostr√° los que aprobaron ambos parciales.
‚Ä¢ Mostr√° los que aprobaron solo uno de los dos.
‚Ä¢ Mostr√° la lista total de estudiantes que aprobaron al menos un parcial (sin repetir).

8) Arm√° un diccionario donde las claves sean nombres de productos y los valores su stock.
Permit√≠ al usuario:
‚Ä¢ Consultar el stock de un producto ingresado.
‚Ä¢ Agregar unidades al stock si el producto ya existe.
‚Ä¢ Agregar un nuevo producto si no existe.

9) Cre√° una agenda donde las claves sean tuplas de (d√≠a, hora) y los valores sean eventos.
Permit√≠ consultar qu√© actividad hay en cierto d√≠a y hora

10) Dado un diccionario que mapea nombres de pa√≠ses con sus capitales, constru√≠ un nuevo
diccionario donde:
‚Ä¢ Las capitales sean las claves.
‚Ä¢ Los pa√≠ses sean los valores.
